From 0590ef08027c9f36d5a3ae5653913494289adb21 Mon Sep 17 00:00:00 2001
From: YunYi Yang <yangyunyi2@huawei.com>
Date: Sat, 26 Aug 2023 17:21:54 +0800
Subject: [PATCH 071/256] fix kabi broken due to change of struct
 blk_mq_tag_set and blk_mq_ops

driver inclusion
category: bugfix
bugzilla: https://gitee.com/src-openeuler/kernel/issues/I8F7ZR

----------------------------------------------------------------------------

Commit 9867bd2cd8dc ("blk-mq: support multiple hctx maps")
changes the struct blk_mq_tag_set and blk_mq_ops, so we need
to fix kabi broken problem.

Signed-off-by: YunYi Yang <yangyunyi2@huawei.com>
---
 include/linux/blk-mq.h | 23 +++++++++++------------
 1 file changed, 11 insertions(+), 12 deletions(-)

diff --git a/include/linux/blk-mq.h b/include/linux/blk-mq.h
index 9ae7e7449c89..6a7d5b28b620 100644
--- a/include/linux/blk-mq.h
+++ b/include/linux/blk-mq.h
@@ -107,13 +107,6 @@ struct blk_mq_tag_set {
 #else
 	struct blk_mq_queue_map map[HCTX_MAX_TYPES];
 #endif
-	/*
-	 * map[] holds ctx -> hctx mappings, one map exists for each type
-	 * that the driver wishes to support. There are no restrictions
-	 * on maps being of the same size, and it's perfectly legal to
-	 * share maps between types.
-	 */
-	unsigned int		nr_maps;	/* nr entries in map[] */
 	const struct blk_mq_ops	*ops;
 	unsigned int		nr_hw_queues;	/* nr hw queues across maps */
 	unsigned int		queue_depth;	/* max hw supported */
@@ -129,7 +122,11 @@ struct blk_mq_tag_set {
 	struct mutex		tag_list_lock;
 	struct list_head	tag_list;
 
+#ifndef __GENKSYMS__
+	unsigned int            nr_maps;        /* nr entries in map[] */
+#else
 	KABI_RESERVE(1)
+#endif
 	KABI_RESERVE(2)
 	KABI_RESERVE(3)
 	KABI_RESERVE(4)
@@ -174,11 +171,6 @@ struct blk_mq_ops {
 	 */
 	queue_rq_fn		*queue_rq;
 
-	/*
-	 * Return a queue map type for the given request/bio flags
-	 */
-	rq_flags_to_type_fn	*rq_flags_to_type;
-
 	/*
 	 * Reserve budget before queue request, once .queue_rq is
 	 * run, it is driver's responsibility to release the
@@ -238,7 +230,14 @@ struct blk_mq_ops {
 	void (*show_rq)(struct seq_file *m, struct request *rq);
 #endif
 
+#ifndef __GENKSYMS__
+	/*
+	 * Return a queue map type for the given request/bio flags
+	 */
+	rq_flags_to_type_fn      * rq_flags_to_type;
+#else
 	KABI_RESERVE(1)
+#endif
 	KABI_RESERVE(2)
 	KABI_RESERVE(3)
 	KABI_RESERVE(4)
-- 
2.27.0

