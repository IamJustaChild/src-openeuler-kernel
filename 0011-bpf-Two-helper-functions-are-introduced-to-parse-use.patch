From 6a369cb1cced763568c779c734b59b64dd290e00 Mon Sep 17 00:00:00 2001
From: bitcoffee <liuxin350@huawei.com>
Date: Thu, 16 Feb 2023 16:28:04 +0800
Subject: [PATCH] bpf: Two helper functions are introduced to parse user-mode 
 messages.

hulk inclusion
category: feature
bugzilla: https://gitee.com/openeuler/kernel/issues/I6CPF6

---

User messages need to be parsed when the bpf link establishment
is delayed. In this case, two helpers need to be introduced. One is
to parse user-mode messages, and the other is to obtain the parsed
data.

Signed-off-by: bitcoffee <liuxin350@huawei.com>
---
 include/uapi/linux/bpf.h       | 21 +++++++++++++++++
 net/core/filter.c              | 41 +++++++++++++++++++++++++++++++++-
 scripts/bpf_doc.py             |  1 +
 tools/include/uapi/linux/bpf.h | 21 +++++++++++++++++
 4 files changed, 83 insertions(+), 1 deletion(-)

diff --git a/include/uapi/linux/bpf.h b/include/uapi/linux/bpf.h
index 4dfd9ca922e9..4ee3a405273b 100644
--- a/include/uapi/linux/bpf.h
+++ b/include/uapi/linux/bpf.h
@@ -5455,6 +5455,20 @@ union bpf_attr {
  * 		Obtains the length of a character string.
  * 	Return
  * 		Length of the string.
+ *
+ * long bpf_parse_header_msg(struct bpf_mem_ptr *msg)
+ * 	Description
+ * 		Parses the content of the msg. User can use `parse_protocol_func`
+ * 		to define the parse function.
+ * 	Return
+ * 		User-defined return value.
+ *
+ * void *bpf_get_msg_header_element(void *name)
+ * 	Description
+ * 		Reads the content of the parsed msg. User can use
+ * 		`get_protocol_element_func` to define the content.
+ * 	Return
+ * 		Contains a pointer to the data and the length of the data.
  */
 #define __BPF_FUNC_MAPPER(FN)		\
 	FN(unspec),			\
@@ -5670,6 +5684,8 @@ union bpf_attr {
 	FN(strncpy),				\
 	FN(strnstr),			\
 	FN(strnlen),				\
+	FN(parse_header_msg),	\
+	FN(get_msg_header_element),	\
 	/* */
 
 /* integer value in 'imm' field of BPF_CALL instruction selects which helper
@@ -6916,6 +6932,11 @@ struct btf_ptr {
 	__u32 flags;		/* BTF ptr flags; unused at present. */
 };
 
+struct bpf_mem_ptr {
+	void *ptr;
+	__u32 size;
+};
+
 /*
  * Flags to control bpf_snprintf_btf() behaviour.
  *     - BTF_F_COMPACT: no formatting around type information
diff --git a/net/core/filter.c b/net/core/filter.c
index dfcaac101121..05d2e75a0cf0 100644
--- a/net/core/filter.c
+++ b/net/core/filter.c
@@ -7461,6 +7461,42 @@ static const struct bpf_func_proto bpf_skb_set_tstamp_proto = {
 	.arg3_type      = ARG_ANYTHING,
 };
 
+typedef int (*bpf_parse_protocol_func)(struct bpf_mem_ptr* msg);
+bpf_parse_protocol_func parse_protocol_func = NULL;
+EXPORT_SYMBOL(parse_protocol_func);
+
+typedef void* (*bpf_get_protocol_element_func)(char *key);
+bpf_get_protocol_element_func get_protocol_element_func = NULL;
+EXPORT_SYMBOL(get_protocol_element_func);
+
+BPF_CALL_1(bpf_parse_header_msg, struct bpf_mem_ptr *, msg)
+{
+	if (!parse_protocol_func)
+		return -ENOTSUPP;
+	return parse_protocol_func(msg);
+}
+
+static const struct bpf_func_proto bpf_parse_header_msg_proto = {
+	.func		= bpf_parse_header_msg,
+	.gpl_only	= false,
+	.ret_type	= RET_INTEGER,
+	.arg1_type	= ARG_ANYTHING,
+};
+
+BPF_CALL_1(bpf_get_msg_header_element, char *, key)
+{
+	if (!get_protocol_element_func)
+		return -ENOTSUPP;
+	return get_protocol_element_func(key);
+}
+
+static const struct bpf_func_proto bpf_get_msg_header_element_proto = {
+	.func		= bpf_get_msg_header_element,
+	.gpl_only	= false,
+	.ret_type	= RET_PTR_TO_ALLOC_MEM_OR_NULL,
+	.arg1_type	= ARG_ANYTHING,
+};
+
 #ifdef CONFIG_SYN_COOKIES
 BPF_CALL_3(bpf_tcp_raw_gen_syncookie_ipv4, struct iphdr *, iph,
 	   struct tcphdr *, th, u32, th_len)
@@ -8031,6 +8067,10 @@ sock_ops_func_proto(enum bpf_func_id func_id, const struct bpf_prog *prog)
 		return &bpf_sock_ops_reserve_hdr_opt_proto;
 	case BPF_FUNC_tcp_sock:
 		return &bpf_tcp_sock_proto;
+	case BPF_FUNC_parse_header_msg:
+		return &bpf_parse_header_msg_proto;
+	case BPF_FUNC_get_msg_header_element:
+		return &bpf_get_msg_header_element_proto;
 #endif /* CONFIG_INET */
 	default:
 		return bpf_sk_base_func_proto(func_id);
@@ -11313,7 +11353,6 @@ const struct bpf_verifier_ops sk_lookup_verifier_ops = {
 	.is_valid_access	= sk_lookup_is_valid_access,
 	.convert_ctx_access	= sk_lookup_convert_ctx_access,
 };
-
 #endif /* CONFIG_INET */
 
 DEFINE_BPF_DISPATCHER(xdp)
diff --git a/scripts/bpf_doc.py b/scripts/bpf_doc.py
index d5c389df6045..6fe6aef3f89e 100755
--- a/scripts/bpf_doc.py
+++ b/scripts/bpf_doc.py
@@ -734,6 +734,7 @@ class PrinterHelpers(Printer):
             'struct bpf_dynptr',
             'struct iphdr',
             'struct ipv6hdr',
+            'struct bpf_mem_ptr',
     }
     mapped_types = {
             'u8': '__u8',
diff --git a/tools/include/uapi/linux/bpf.h b/tools/include/uapi/linux/bpf.h
index 5403a0ee272d..e40882a083e1 100644
--- a/tools/include/uapi/linux/bpf.h
+++ b/tools/include/uapi/linux/bpf.h
@@ -5455,6 +5455,20 @@ union bpf_attr {
  * 		Obtains the length of a character string.
  * 	Return
  * 		Length of the string.
+ *
+ * int bpf_parse_header_msg(struct bpf_mem_ptr *msg)
+ * 	Description
+ * 		Parses the content of the msg. User can use `parse_protocol_func`
+ * 		to define the parse function.
+ * 	Return
+ * 		User-defined return value.
+ *
+ * void *bpf_get_msg_header_element(void *name)
+ * 	Description
+ * 		Reads the content of the parsed msg. User can use
+ * 		`get_protocol_element_func` to define the content.
+ * 	Return
+ * 		Contains a pointer to the data and the length of the data.
  */
 #define __BPF_FUNC_MAPPER(FN)		\
 	FN(unspec),			\
@@ -5670,6 +5684,8 @@ union bpf_attr {
 	FN(strncpy),				\
 	FN(strnstr),			\
 	FN(strnlen),				\
+	FN(parse_header_msg),	\
+	FN(get_msg_header_element),	\
 	/* */
 
 /* integer value in 'imm' field of BPF_CALL instruction selects which helper
@@ -6914,6 +6930,11 @@ struct btf_ptr {
 	__u32 flags;		/* BTF ptr flags; unused at present. */
 };
 
+struct bpf_mem_ptr {
+	void *ptr;
+	__u32 size;
+};
+
 /*
  * Flags to control bpf_snprintf_btf() behaviour.
  *     - BTF_F_COMPACT: no formatting around type information
-- 
2.33.0

